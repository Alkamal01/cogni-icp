import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { useAuth } from '../contexts/AuthContext';
import { useToast } from '../contexts/ToastContext';
import { FaBars } from 'react-icons/fa'; 
import ReactDOM from 'react-dom'; 
import { 
  Home,
  X,
  ChevronDown,
  CheckCircle,
  Clock,
  BookOpen, 
  AlertCircle, 
  ArrowRight,
  XCircle, 
  MessageSquare, 
  User, 
  Award, 
  Zap, 
  GraduationCap,
  Star,
  Book,
  Users,
  Info,
  BarChart2,
  AlertCircle as CircleAlert,
  ArrowRight as Forward,
  Loader2,
  MessageSquare as MessageCircle,
  Brain
} from 'lucide-react';
import { Button, Card, Input, MarkdownRenderer, Loading } from '../components/shared';
import ChatInput from '../components/tutors/ChatInput';
import tutorService, { 
  Tutor, 
  TutorSession as TutorSessionType, 
  TutorMessage, 
  TutorCourse, 
  CourseModule, 
  LearningProgress, 
  ComprehensionAnalysis,
  TutorRating
} from '../services/tutorService';
import notificationManager from '../utils/notificationManager';
import { checkAuthStatus } from '../utils/authDebug';
import { useDebounce } from '../hooks/useDebounce';
import { aiSocketService, TutorMessageChunk, ProgressUpdate } from '../services/aiSocketService';
import { StreamingTutorMessage } from '../components/tutors/StreamingTutorMessage';
import { useStreamingTutor } from '../hooks/useStreamingTutor';

// Temporary inline tooltip components
const Tooltip = ({ children }: { children: React.ReactNode }) => <div className="relative">{children}</div>;
const TooltipContent = ({ children }: { children: React.ReactNode }) => <div className="absolute bottom-full mb-2 p-2 bg-gray-800 text-white text-xs rounded shadow-lg">{children}</div>;
const TooltipTrigger = ({ asChild, children }: { asChild?: boolean, children: React.ReactNode }) => <div>{children}</div>;

// Custom Bookmark icon
const BookmarkIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path>
  </svg>
);

// Custom ExternalLink icon
const ExternalLinkIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
    <polyline points="15 3 21 3 21 9"></polyline>
    <line x1="10" y1="14" x2="21" y2="3"></line>
  </svg>
);

// SVG components for icons that don't work from lucide-react
const AlertTriangleIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>
    <line x1="12" y1="9" x2="12" y2="13"></line>
    <line x1="12" y1="17" x2="12.01" y2="17"></line>
  </svg>
);

const ChevronRightIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <polyline points="9 18 15 12 9 6"></polyline>
  </svg>
);

const TrashIcon = ({ className }: { className?: string }) => (
  <svg 
    xmlns="http://www.w3.org/2000/svg" 
    width="24" 
    height="24" 
    viewBox="0 0 24 24" 
    fill="none" 
    stroke="currentColor" 
    strokeWidth="2" 
    strokeLinecap="round" 
    strokeLinejoin="round"
    className={className}
  >
    <polyline points="3 6 5 6 21 6"></polyline>
    <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
    <line x1="10" y1="11" x2="10" y2="17"></line>
    <line x1="14" y1="11" x2="14" y2="17"></line>
  </svg>
);

// Add custom Target icon
const Target = ({ className }: { className?: string }) => (
  <svg 
    xmlns="http://www.w3.org/2000/svg" 
    width="24" 
    height="24" 
    viewBox="0 0 24 24" 
    fill="none" 
    stroke="currentColor" 
    strokeWidth="2" 
    strokeLinecap="round" 
    strokeLinejoin="round"
    className={className}
  >
    <circle cx="12" cy="12" r="10"></circle>
    <circle cx="12" cy="12" r="6"></circle>
    <circle cx="12" cy="12" r="2"></circle>
  </svg>
);

// Add custom Plus icon
const Plus = ({ className }: { className?: string }) => (
  <svg 
    xmlns="http://www.w3.org/2000/svg" 
    width="24" 
    height="24" 
    viewBox="0 0 24 24" 
    fill="none" 
    stroke="currentColor" 
    strokeWidth="2" 
    strokeLinecap="round" 
    strokeLinejoin="round"
    className={className}
  >
    <line x1="12" y1="5" x2="12" y2="19"></line>
    <line x1="5" y1="12" x2="19" y2="12"></line>
  </svg>
);

// Add custom SendIcon icon
const SendIcon = ({ className }: { className?: string }) => (
  <svg 
    xmlns="http://www.w3.org/2000/svg" 
    width="24" 
    height="24" 
    viewBox="0 0 24 24" 
    fill="none" 
    stroke="currentColor" 
    strokeWidth="2" 
    strokeLinecap="round" 
    strokeLinejoin="round"
    className={className}
  >
    <line x1="22" y1="2" x2="11" y2="13"></line>
    <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
  </svg>
);

interface SessionParams {
  sessionId?: string;
  tutorId?: string;
  [key: string]: string | undefined;
}

// Typing effect speed in milliseconds (lower = faster)
const TYPING_SPEED = 40; // Default typing speed - adjust for more noticeable typing animation

interface SessionInfo {
  session: TutorSessionType;
  tutor: Tutor;
  course: TutorCourse;
  progress: LearningProgress;
  last_message: TutorMessage;
}

// Add these interfaces to the top with other interfaces
interface TopicSuggestion {
  topic: string;
  description: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  expertise_area: string;
}

interface TopicValidation {
  is_relevant: boolean;
  confidence: number;
  reasoning?: string;
  suggested_alternatives?: string[];
}

// Add the delete confirmation modal
const DeleteConfirmationModal = ({ isOpen, onClose, onConfirm, isDeleting, error, sessionToDeleteId }: {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: (sessionId: string) => void;
  isDeleting: boolean;
  error: string | null;
  sessionToDeleteId: string | null;
}) => {
  useEffect(() => {
  }, [sessionToDeleteId]);
  
  if (!isOpen) return null;
  
  return ReactDOM.createPortal(
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-[100]">
      <div className="bg-white dark:bg-gray-800 rounded-lg w-full max-w-md p-6 shadow-xl z-[101]">
        <div className="flex items-center text-red-600 dark:text-red-400 mb-4">
          <AlertTriangleIcon />
          <h3 className="text-lg font-bold ml-2">Confirm Deletion</h3>
        </div>
        
        <p className="text-gray-700 dark:text-gray-300 mb-4">
          Are you sure you want to delete this topic? This action cannot be undone, and all messages and progress will be lost.
        </p>
        
        {error && (
          <div className="mb-4 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded text-red-700 dark:text-red-400 text-sm">
            <div className="flex items-start">
              <CircleAlert className="w-5 h-5 mr-2 flex-shrink-0 mt-0.5" />
              <p>{error}</p>
            </div>
          </div>
        )}
        
        <div className="flex justify-end space-x-3">
          <Button
            variant="outline"
            onClick={() => {
              onClose();
            }}
            disabled={isDeleting}
          >
            Cancel
          </Button>
          <Button
            variant="danger"
            onClick={() => {
              if (sessionToDeleteId) {
                onConfirm(sessionToDeleteId);
              } else {
                console.error("Delete confirmation: sessionToDeleteId prop is missing");
              }
            }}
            disabled={isDeleting || !sessionToDeleteId}
            isLoading={isDeleting}
          >
            Delete Topic
          </Button>
        </div>
      </div>
    </div>,
    document.body
  );
};

// Add this new component for rating tutors
interface RatingComponentProps {
  tutorId: string;
  onRatingSubmitted?: () => void;
}

const RatingComponent: React.FC<RatingComponentProps> = ({ tutorId, onRatingSubmitted }) => {
  const [userRating, setUserRating] = useState<TutorRating | null>(null);
  const [averageRating, setAverageRating] = useState<number | null>(null);
  const [ratingCount, setRatingCount] = useState<number>(0);
  const [hoverRating, setHoverRating] = useState<number>(0);
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [comment, setComment] = useState<string>('');
  const [showCommentForm, setShowCommentForm] = useState<boolean>(false);
  const { showToast } = useToast();

  // Fetch ratings when component mounts
  useEffect(() => {
    const fetchRatings = async () => {
      try {
        const result = await tutorService.getTutorRatings(tutorId);
        setUserRating(result.user_rating);
        setAverageRating(result.average_rating);
        setRatingCount(result.rating_count);
        
        if (result.user_rating?.comment) {
          setComment(result.user_rating.comment);
          setShowCommentForm(true);
        }
      } catch (error) {
        console.error('Error fetching ratings:', error);
      }
    };

    fetchRatings();
  }, [tutorId]);

  // Handle rating submission
  const handleSubmitRating = async (rating: number) => {
    if (rating < 1 || rating > 5) return;

    try {
      setIsSubmitting(true);
      const result = await tutorService.rateTutor(tutorId, rating, comment);
      
      setUserRating(result.rating);
      setAverageRating(result.average_rating);
      setRatingCount(result.rating_count);
      showToast('success', 'Rating submitted successfully!');
      
      if (onRatingSubmitted) {
        onRatingSubmitted();
      }
    } catch (error) {
      console.error('Error submitting rating:', error);
      showToast('error', 'Failed to submit rating. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Delete a rating
  const handleDeleteRating = async () => {
    if (!userRating) return;
    
    try {
      setIsSubmitting(true);
      await tutorService.deleteRating(tutorId, userRating.id);
      
      setUserRating(null);
      setComment('');
      setShowCommentForm(false);
      showToast('success', 'Rating removed successfully');
      
      if (onRatingSubmitted) {
        onRatingSubmitted();
      }
    } catch (error) {
      console.error('Error deleting rating:', error);
      showToast('error', 'Failed to remove rating');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="p-4 bg-gray-50 dark:bg-gray-750 border-b border-gray-200 dark:border-gray-700">
      <h3 className="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2 flex items-center">
        <Star className="w-4 h-4 text-yellow-500 mr-1" />
        Rate This Tutor
      </h3>
      
      {averageRating !== null && (
        <div className="flex items-center mb-3">
          <div className="flex">
            {[1, 2, 3, 4, 5].map((star) => (
              <Star 
                key={star} 
                className={`w-4 h-4 ${star <= Math.round(averageRating || 0) ? 'text-yellow-500 fill-current' : 'text-gray-300 dark:text-gray-600'}`} 
              />
            ))}
          </div>
          <span className="ml-2 text-sm font-medium text-gray-600 dark:text-gray-400">
            {(averageRating || 0).toFixed(1)} ({ratingCount || 0} {(ratingCount || 0) === 1 ? 'rating' : 'ratings'})
          </span>
        </div>
      )}
      
      <div className="mb-2">
        <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">
          {userRating ? 'Your rating:' : 'Rate this tutor:'}
        </p>
        <div className="flex">
          {[1, 2, 3, 4, 5].map((star) => (
            <button
              key={star}
              disabled={isSubmitting}
              onMouseEnter={() => setHoverRating(star)}
              onMouseLeave={() => setHoverRating(0)}
              onClick={() => handleSubmitRating(star)}
              className="focus:outline-none disabled:opacity-50"
            >
              <Star 
                className={`w-5 h-5 transition-colors ${
                  star <= (hoverRating || (userRating?.rating || 0)) 
                    ? 'text-yellow-500 fill-current'
                    : 'text-gray-300 dark:text-gray-600'
                }`} 
              />
            </button>
          ))}
        </div>
      </div>
      
      {(showCommentForm || userRating) && (
        <div className="mt-2">
          <label className="block text-sm text-gray-600 dark:text-gray-400 mb-1">
            Comment (optional):
          </label>
          <textarea
            value={comment}
            onChange={(e) => setComment(e.target.value)}
            disabled={isSubmitting}
            className="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white resize-none"
            rows={2}
            placeholder="Add a comment about your experience..."
          />
          <div className="flex justify-between mt-2">
            {userRating && (
              <Button
                variant="outline"
                size="sm"
                onClick={handleDeleteRating}
                disabled={isSubmitting}
                className="text-xs"
              >
                Remove Rating
              </Button>
            )}
            <Button
              variant="primary"
              size="sm"
              onClick={() => handleSubmitRating(userRating?.rating || 5)}
              disabled={isSubmitting}
              isLoading={isSubmitting}
              className="text-xs ml-auto"
            >
              {userRating ? 'Update' : 'Submit'}
            </Button>
          </div>
        </div>
      )}
      
      {!showCommentForm && !userRating && (
        <Button
          variant="ghost"
          size="sm"
          onClick={() => setShowCommentForm(true)}
          className="text-xs text-primary-600 dark:text-primary-400 p-0 hover:bg-transparent"
        >
          + Add a comment
        </Button>
      )}
    </div>
  );
};

// Add this component for the topic list view
const TopicListView: React.FC<{
  tutor: Tutor;
  tutorSessions: SessionInfo[];
  topicListLoading: boolean;
  topicListError: string | null;
  topicSuggestions: TopicSuggestion[];
  isLoadingSuggestions: boolean;
  onStartSession: (e: React.FormEvent) => void;
  onTopicSuggestionClick: (suggestion: TopicSuggestion) => void;
  topic: string;
  setTopic: (topic: string) => void;
  isStartingSession: boolean;
  topicValidation: TopicValidation | null;
  showValidationMessage: boolean;
  isValidatingTopic: boolean;
  navigate: (path: string) => void;
  openDeleteModal: (sessionId: string) => void;
  deletingSessionId: string | null;
  isDeleting: boolean;
  deleteError: string | null;
  handleDeleteSession: (sessionId: string) => void;
  setDeletingSessionId: (sessionId: string | null) => void;
}> = ({
  tutor,
  tutorSessions,
  topicListLoading,
  topicListError,
  topicSuggestions,
  isLoadingSuggestions,
  onStartSession,
  onTopicSuggestionClick,
  topic,
  setTopic,
  isStartingSession,
  topicValidation,
  showValidationMessage,
  isValidatingTopic,
  navigate,
  openDeleteModal,
  deletingSessionId,
  isDeleting,
  deleteError,
  handleDeleteSession,
  setDeletingSessionId
}) => {
  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-900 p-6">
      <DeleteConfirmationModal
        isOpen={!!deletingSessionId}
        onClose={() => setDeletingSessionId(null)}
        onConfirm={handleDeleteSession}
        isDeleting={isDeleting}
        error={deleteError}
        sessionToDeleteId={deletingSessionId}
      />
      <div className="max-w-7xl mx-auto">
        {/* Header with Tutor Info */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 mb-6">
          <div className="flex items-center">
            <img
              src={tutor.avatar_url || `https://ui-avatars.com/api/?name=${encodeURIComponent(tutor.name)}&background=random&color=fff&size=128`}
              alt={tutor.name}
              className="w-16 h-16 rounded-full mr-4"
              onError={(e) => {
                const target = e.target as HTMLImageElement;
                target.onerror = null;
                target.src = `https://ui-avatars.com/api/?name=${encodeURIComponent(tutor.name)}&background=random&color=fff&size=128`;
              }}
            />
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-white">{tutor.name}</h1>
              <p className="text-gray-600 dark:text-gray-400">{tutor.teaching_style} Tutor</p>
            </div>
          </div>
        </div>

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Left Column - New Session & Suggestions */}
          <div className="space-y-6">
            {/* Start New Session Card */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4 flex items-center">
                <MessageSquare className="w-5 h-5 mr-2 text-primary-500" />
                Start a New Session
              </h2>
              <form onSubmit={onStartSession} className="space-y-4">
                <div>
                  <label htmlFor="topic" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    What would you like to learn about?
                  </label>
                  <input
                    type="text"
                    id="topic"
                    value={topic}
                    onChange={(e) => setTopic(e.target.value)}
                    className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                    placeholder="Enter a topic you'd like to learn about..."
                    disabled={isStartingSession}
                  />
                  {showValidationMessage && topicValidation && (
                    <div className={`mt-2 text-sm ${topicValidation.is_relevant ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>
                      {topicValidation.reasoning}
                    </div>
                  )}
                  {isValidatingTopic && (
                    <div className="mt-2 text-sm text-gray-500 dark:text-gray-400">
                      Validating topic...
                    </div>
                  )}
                </div>
                <Button
                  type="submit"
                  variant="primary"
                  className="w-full"
                  disabled={isStartingSession || !topic.trim()}
                  isLoading={isStartingSession}
                >
                  Start Learning Session
                </Button>
              </form>
            </div>

            {/* Suggested Topics Card */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4 flex items-center">
                <BookOpen className="w-5 h-5 mr-2 text-primary-500" />
                Suggested Topics
              </h2>
              {isLoadingSuggestions ? (
                <div className="text-center py-4">
                  <Loading />
                </div>
              ) : topicSuggestions.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {topicSuggestions.map((suggestion, index) => (
                    <div
                      key={index}
                      className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg hover:border-primary-500 dark:hover:border-primary-500 cursor-pointer transition-colors"
                      onClick={() => onTopicSuggestionClick(suggestion)}
                    >
                      <h3 className="font-medium text-gray-900 dark:text-white mb-1">{suggestion.topic}</h3>
                      <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">{suggestion.description}</p>
                      <div className="flex items-center text-xs text-gray-500 dark:text-gray-400">
                        <span className="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-full mr-2">
                          {suggestion.difficulty}
                        </span>
                        <span>{suggestion.expertise_area}</span>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-600 dark:text-gray-400 text-center">No suggestions available</p>
              )}
            </div>
          </div>

          {/* Right Column - Previous Sessions */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6">
            <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4 flex items-center">
              <Clock className="w-5 h-5 mr-2 text-primary-500" />
              Previous Sessions
            </h2>
            
            {topicListLoading ? (
              <div className="text-center py-8">
                <Loading />
              </div>
            ) : topicListError ? (
              <div className="text-red-600 dark:text-red-400 text-center py-8">{topicListError}</div>
            ) : tutorSessions.length === 0 ? (
              <div className="text-center py-8">
                <p className="text-gray-600 dark:text-gray-400">No previous sessions found.</p>
                <p className="text-sm text-gray-500 dark:text-gray-500 mt-2">Start a new session to begin learning!</p>
              </div>
            ) : (
              <div className="space-y-4">
                {tutorSessions.map((sessionInfo) => (
                  <div
                    key={sessionInfo.session.public_id}
                    className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:border-primary-500 dark:hover:border-primary-500 transition-colors"
                  >
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-1">
                          {sessionInfo.course.topic}
                        </h3>
                        <div className="flex flex-wrap items-center text-sm text-gray-600 dark:text-gray-400 gap-4">
                          <span className="flex items-center">
                            <Clock className="w-4 h-4 mr-1" />
                            {new Date(sessionInfo.session.created_at).toLocaleDateString()}
                          </span>
                          <span className="flex items-center">
                            <BookOpen className="w-4 h-4 mr-1" />
                            {sessionInfo.course.difficulty_level}
                          </span>
                          <span className="flex items-center">
                            <Award className="w-4 h-4 mr-1" />
                            {sessionInfo.progress.progress_percentage}% complete
                          </span>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <button
                          type="button"
                          onClick={() => {

                            openDeleteModal(sessionInfo.session.public_id);
                          }}
                          className="inline-flex items-center justify-center h-8 px-3 text-sm border border-red-200 dark:border-red-800 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-md transition-colors"
                          title="Delete this session"
                        >
                          <TrashIcon className="w-4 h-4" />
                        </button>
                        <Button
                          variant="primary"
                          size="sm"
                          onClick={(e) => {
                            e.stopPropagation();
                            navigate(`/tutors/${tutor.public_id}/${sessionInfo.session.public_id}`);
                          }}
                        >
                          Continue
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

const Avatar = ({ user, tutor }: { user?: any; tutor?: Tutor }) => {
  const getInitials = (name: string) => {
    return name
      .split(' ')
      .map((n) => n[0])
      .join('');
  };

  const name = user?.name || tutor?.name || '';
  const avatarUrl = user?.avatar_url || tutor?.avatar_url;

  if (avatarUrl) {
    return (
      <img
        src={avatarUrl}
        alt={`${name} avatar`}
        className="w-8 h-8 rounded-full"
        onError={(e) => {
          const target = e.target as HTMLImageElement;
          target.onerror = null;
          target.src = `https://ui-avatars.com/api/?name=${encodeURIComponent(
            name
          )}&background=random&color=fff&size=128`;
        }}
      />
    );
  }

  return (
    <div className="w-8 h-8 rounded-full bg-gray-700 text-white flex items-center justify-center flex-shrink-0">
      <span>{getInitials(name)}</span>
    </div>
  );
};

const ChatMessage = ({
  author,
  children,
  user,
  tutor,
}: {
  author: 'user' | 'tutor';
  children: React.ReactNode;
  user?: any;
  tutor?: Tutor | null;
}) => {
  return (
    <div className={`flex items-start gap-3 my-4 ${author === 'user' ? 'justify-end' : ''}`}>
      {author === 'tutor' && <Avatar tutor={tutor ?? undefined} />}
      <div className={`p-3 rounded-lg max-w-[70%] ${author === 'user' ? 'bg-primary-500 text-white' : 'bg-gray-200 dark:bg-gray-700'}`}>
        {children}
      </div>
      {author === 'user' && <Avatar user={user} />}
    </div>
  );
};

const TutorSession: React.FC = () => {
  const { user } = useAuth();
  const { showToast } = useToast();
  const { id: tutorId, sessionId } = useParams<{ id: string; sessionId?: string }>();
  const navigate = useNavigate();
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const [tutor, setTutor] = useState<Tutor | null>(null);
  const [session, setSession] = useState<TutorSessionType | null>(null);
  const [course, setCourse] = useState<TutorCourse | null>(null);
  const [modules, setModules] = useState<CourseModule[]>([]);
  const [progress, setProgress] = useState<LearningProgress | null>(null);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [isSending, setIsSending] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [topic, setTopic] = useState<string>('');
  const [isStartingSession, setIsStartingSession] = useState<boolean>(false);
  const [expandedModule, setExpandedModule] = useState<number | null>(null);
  const [isCourseSidebarOpen, setIsCourseSidebarOpen] = useState(false);
  const [deletingSessionId, setDeletingSessionId] = useState<string | null>(null);
  const [isDeleting, setIsDeleting] = useState<boolean>(false);
  const [deleteError, setDeleteError] = useState<string | null>(null);
  const [showTopicList, setShowTopicList] = useState<boolean>(!sessionId);
  const [tutorSessions, setTutorSessions] = useState<SessionInfo[]>([]);
  const [topicListLoading, setTopicListLoading] = useState<boolean>(false);
  const [topicListError, setTopicListError] = useState<string | null>(null);
  const [debouncedTopic] = useDebounce(topic, 500);
  const [topicSuggestions, setTopicSuggestions] = useState<TopicSuggestion[]>([]);
  const [isLoadingSuggestions, setIsLoadingSuggestions] = useState<boolean>(false);
  const [topicValidation, setTopicValidation] = useState<TopicValidation | null>(null);
  const [showValidationMessage, setShowValidationMessage] = useState<boolean>(false);
  const [isValidatingTopic, setIsValidatingTopic] = useState<boolean>(false);
  const { messages, status: tutorStatus, sendMessage, isConnected, isError, loadInitialMessages } = useStreamingTutor(sessionId);
  const [sessionProgress, setSessionProgress] = useState<number>(0);
  const [currentModule, setCurrentModule] = useState<string | null>(null);

  // Initialize session data
  useEffect(() => {
  const initializeSession = async () => {
      // This is the key change: reset state based on sessionId presence
      setShowTopicList(!sessionId || sessionId === 'undefined');
    setIsLoading(true);
    setError(null);
    
    try {
      if (!tutorId) {
        throw new Error('Invalid tutor ID');
      }

      // Load tutor first
      const loadedTutor = await tutorService.getTutor(tutorId);
      
      if (!loadedTutor || !loadedTutor.public_id) {
        throw new Error('Failed to load tutor data');
      }
      
      setTutor(loadedTutor);

      if (sessionId && sessionId !== 'undefined') {
        // Load session data if we have a valid sessionId
          try {
        const sessionData = await tutorService.getSession(sessionId);
            if (!sessionData || !sessionData.session) {
              throw new Error('Failed to load session data');
            }
        setSession(sessionData.session);
        setCourse(sessionData.course);
        setModules(sessionData.modules || []);
        setProgress(sessionData.progress);
          loadInitialMessages(sessionData.messages || []);
          } catch (error) {
            console.error('Error loading session:', error);
            // If session loading fails, show topic list instead of redirecting
            setShowTopicList(true);
            setError('Failed to load session. Please start a new session.');
          }
      } else {
        // Load topic suggestions and previous sessions for the topic list view
        setTopicListLoading(true);
        setIsLoadingSuggestions(true);

        // Load previous sessions first (usually faster)
        tutorService.getAllSessions()
          .then(sessions => {
            setTutorSessions(sessions || []);
            setTopicListLoading(false);
          })
          .catch(error => {
            console.error('Error loading previous sessions:', error);
            setTopicListError('Failed to load previous sessions');
            setTopicListLoading(false);
          });

        // Load topic suggestions separately (can be slower)
        tutorService.getSuggestedTopics(loadedTutor.public_id)
          .then(suggestions => {
            setTopicSuggestions(suggestions || []);
            setIsLoadingSuggestions(false);
          })
          .catch(error => {
            console.error('Error loading topic suggestions:', error);
            setIsLoadingSuggestions(false);
          });
      }

      setIsLoading(false);
    } catch (error) {
      console.error('Error initializing session:', error);
      setError('Failed to initialize session');
      setIsLoading(false);
    }
  };
    initializeSession();
  }, [sessionId, tutorId, loadInitialMessages]);

  useEffect(() => {
    if (!sessionId) return;

    // Connect to WebSocket
    aiSocketService.connect(sessionId);

    // Listen for progress updates
    const handleProgressUpdate = (update: ProgressUpdate) => {
      if (update.session_id === sessionId) {
        setSessionProgress(update.progress.progress_percentage);
        setCurrentModule(update.progress.current_module_id?.toString() || null);
      }
    };

    aiSocketService.onProgressUpdate(handleProgressUpdate);

    return () => {
      aiSocketService.offProgressUpdate(handleProgressUpdate);
      aiSocketService.disconnect();
    };
  }, [sessionId]);

  // Scroll to the bottom of the message container
  const scrollToBottom = () => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  };

  // Format timestamp
  const formatTime = (timestamp: string): string => {
    try {
      return new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    } catch {
      return '';
    }
  };

  // Toggle module expansion in sidebar
  const toggleModule = (moduleId: number) => {
    setExpandedModule(prev => (prev === moduleId ? null : moduleId));
  };

  // Get Module Status Icon
  const getModuleStatusIcon = (moduleStatus: string, isCurrent: boolean) => {
    if (moduleStatus === 'completed') {
      return <CheckCircle className="w-5 h-5 text-green-500" />;
    }
    if (isCurrent) {
      return <Target className="w-5 h-5 text-primary-500 animate-pulse" />;
    }
    return <XCircle className="w-5 h-5 text-gray-400" />;
  };

  // Functions for delete modal
  const openDeleteModal = (sessionId: string) => {
    setDeletingSessionId(sessionId);
    setDeleteError(null);
  };

  const handleDeleteSession = useCallback(async (idToDelete: string) => {
    if (!idToDelete) {
      console.error('Aborting delete: idToDelete is not set.');
      setDeleteError('An internal error occurred: Session ID is missing.');
      return;
    }
    
    setIsDeleting(true);
    setDeleteError(null);
    
    try {
      await tutorService.deleteSession(idToDelete);
      setDeletingSessionId(null); // Close modal on success
      showToast('success', 'Session deleted successfully');
      
      // Check if we're currently viewing the deleted session
      if (sessionId === idToDelete) {
        // If we're in the session being deleted, navigate to the tutor's session list
        navigate(`/tutors/${tutor?.public_id}`);
      } else {
        // If we're in the topic list view, refresh the sessions list
        if (tutor) {
          try {
            const sessions = await tutorService.getAllSessions();
            setTutorSessions(sessions || []);
          } catch (error) {
            console.error('Error refreshing sessions list:', error);
            showToast('error', 'Failed to refresh sessions list');
          }
        }
      }
    } catch (error: any) {
      console.error('Error deleting session:', error);
      const errorMessage = error.response?.data?.message || 'Failed to delete session. Please try again.';
      setDeleteError(errorMessage);
      showToast('error', errorMessage);
    } finally {
      setIsDeleting(false);
    }
  }, [tutor, navigate, showToast, sessionId]);

  // Update the fetchTopicSuggestions function
  const fetchTopicSuggestions = async (tutorId: string): Promise<void> => {
    if (!tutorId || tutorId === 'undefined') {
      console.warn('Invalid tutor ID for fetching suggestions');
      setTopicSuggestions([]);
      return;
    }
    
    setIsLoadingSuggestions(true);
    try {
      const suggestions = await tutorService.getSuggestedTopics(tutorId);

      
      if (Array.isArray(suggestions) && suggestions.length > 0) {
        setTopicSuggestions(suggestions);
      } else {
        console.warn('No suggestions returned from API');
        setTopicSuggestions([]);
      }
    } catch (error) {
      console.error('Error fetching topic suggestions:', error);
      setTopicSuggestions([]);
      showToast('error', 'Failed to load topic suggestions');
    } finally {
      setIsLoadingSuggestions(false);
    }
  };

  // Add effect to validate topic when it changes
  useEffect(() => {
    if (!topic.trim() || !tutor?.public_id) return;

    const validateTopic = async () => {
      setIsValidatingTopic(true);
      try {
        const validation = await tutorService.validateTopic(tutor.public_id, topic);
        setTopicValidation(validation);
        setShowValidationMessage(true);
      } catch (error) {
        console.error('Error validating topic:', error);
        setTopicValidation(null);
      } finally {
        setIsValidatingTopic(false);
      }
    };

    const timeoutId = setTimeout(validateTopic, 500);
    return () => clearTimeout(timeoutId);
  }, [topic, tutor?.public_id]);

  // Handle starting a new session
  const handleStartSession = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!tutor?.public_id || !topic.trim()) return;

    setIsStartingSession(true);
    try {
      const newSession = await tutorService.startSession(tutor.public_id, topic);
      showToast('success', 'Session started successfully');
      navigate(`/tutors/${tutor.public_id}/${newSession.public_id}`);
    } catch (error) {
      console.error('Error starting session:', error);
      showToast('error', 'Failed to start session');
    } finally {
      setIsStartingSession(false);
    }
  };

  // Handle clicking on a topic suggestion
  const handleTopicSuggestionClick = (suggestion: TopicSuggestion) => {
    setTopic(suggestion.topic);
  };

  // Handle key press for sending message
  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
        handleSendMessage();
    }
  };

  // Complete a module
  const completeModule = async (moduleId: number): Promise<void> => {
    if (!sessionId || !tutor) return;
    
    try {
      const response = await tutorService.completeModule(sessionId, moduleId);
      
      // Find the module title for notification
      const moduleToComplete = modules.find(m => m.id === moduleId);
      const moduleTitle = moduleToComplete?.title || `Module ${moduleId}`;
      
      // Update module status locally
      setModules(prevModules => 
        prevModules.map(m => m.id === moduleId ? { ...m, status: 'completed' } : m)
      );
      
      // Update progress with the response from the backend
      if (response.progress) {
        setProgress(response.progress);
        console.log('Updated progress after module completion:', response.progress);
      } else {
        // Fallback: reload session data to get updated progress
        try {
          const sessionData = await tutorService.getSession(sessionId);
          setProgress(sessionData.progress);
          console.log('Reloaded progress after module completion:', sessionData.progress);
        } catch (error) {
          console.error('Error reloading session data:', error);
        }
      }
      
      // Create notification for module completion
      await notificationManager.showSuccess(
        `You've completed the "${moduleTitle}" module with ${tutor.name}!`,
        'tutor',
        sessionId
      );
      
      showToast('success', `Great job completing module ${moduleId}!`);
    } catch (err: any) {
      console.error('Error completing module:', err);
      const errorMessage = err.response?.data?.message || 'Failed to mark module as complete.';
      setError(errorMessage);
      showToast('error', errorMessage);
    }
  };

  // Complete the session
  const completeSession = async (): Promise<void> => {
    if (!sessionId || !tutor) return;
    
    try {
      await tutorService.completeSession(sessionId);
      
      // Create a notification for session completion
      await notificationManager.notifySessionComplete(tutor.name, sessionId);
      
      // Reload session data
      const sessionData = await tutorService.getSession(sessionId);
      setSession(sessionData.session);
      showToast('success', 'Session completed successfully.');
    } catch (error: any) {
      console.error('Error completing session:', error);
      const errorMessage = error.response?.data?.message || 'Failed to complete session. Please try again.';
      showToast('error', errorMessage);
    }
  };

  const handleSendMessage = () => {
    if (input.trim() !== '') {
      sendMessage(input);
      setInput('');
        }
  };

  // All hooks are called, now we can have conditional rendering.
  if (showTopicList && tutor) {
    return (
      <TopicListView
        tutor={tutor}
        tutorSessions={tutorSessions}
        topicListLoading={topicListLoading}
        topicListError={topicListError}
        topicSuggestions={topicSuggestions}
        isLoadingSuggestions={isLoadingSuggestions}
        onStartSession={handleStartSession}
        onTopicSuggestionClick={handleTopicSuggestionClick}
        topic={topic}
        setTopic={setTopic}
        isStartingSession={isStartingSession}
        topicValidation={topicValidation}
        showValidationMessage={showValidationMessage}
        isValidatingTopic={isValidatingTopic}
        navigate={navigate}
        openDeleteModal={openDeleteModal}
        deletingSessionId={deletingSessionId}
        isDeleting={isDeleting}
        deleteError={deleteError}
        handleDeleteSession={handleDeleteSession}
        setDeletingSessionId={setDeletingSessionId}
      />
    );
    }

  // Update the main return statement to handle loading state
  if (isLoading) {

    return (
      <div className="flex items-center justify-center h-screen">
        <div className="flex flex-col items-center space-y-4">
          <Loading />
          <div className="text-sm text-gray-500">Loading...</div>
        </div>
      </div>
    );
  }

  if (error) {

    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-red-600 dark:text-red-400">{error}</div>
      </div>
    );
  }

  // Show chat interface if we have all required data
  if (session && tutor && course && modules && progress) {
    const toggleCourseSidebar = () => setIsCourseSidebarOpen(!isCourseSidebarOpen);

    return (
      <div className="flex h-screen bg-gray-100 dark:bg-gray-900 relative"> {/* Set fixed screen height */}
        <DeleteConfirmationModal
          isOpen={!!deletingSessionId}
          onClose={() => setDeletingSessionId(null)}
          onConfirm={handleDeleteSession}
          isDeleting={isDeleting}
          error={deleteError}
          sessionToDeleteId={deletingSessionId}
        />
          {/* Course Sidebar */}
        {/* Adjusted classes for responsiveness */}
        <aside className={`fixed inset-y-0 left-0 z-40 w-80 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 flex flex-col flex-shrink-0 transform transition-transform duration-300 ease-in-out lg:relative lg:translate-x-0 lg:flex ${isCourseSidebarOpen ? "translate-x-0" : "-translate-x-full"}`}>
           {/* Sidebar Header */}
            <div className="p-4 border-b border-gray-200 dark:border-gray-700 flex items-center">
              {/* Close button for mobile view of course sidebar */}
              <Button variant="ghost" size="sm" onClick={toggleCourseSidebar} className="lg:hidden mr-2 p-2 text-gray-600 dark:text-gray-400">
                <X className="w-6 h-6" />
          </Button>
              <Button variant="ghost" size="sm" onClick={() => navigate('/tutors')} className="mr-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full hidden sm:inline-flex"> {/* Hide on very small screens if X is present */}
                <Home className="w-5 h-5 text-gray-600 dark:text-gray-400" />
              </Button>
              <img 
                  src={tutor.avatar_url || `https://ui-avatars.com/api/?name=${encodeURIComponent(tutor.name)}&background=random&color=fff&size=128`}
                  alt={`${tutor.name} avatar`}
                  className="w-10 h-10 rounded-full mr-2"
                  onError={(e) => {
                    const target = e.target as HTMLImageElement;
                    target.onerror = null; // Prevent infinite loop
                    target.src = `https://ui-avatars.com/api/?name=${encodeURIComponent(tutor.name)}&background=random&color=fff&size=128`;
                  }}
              />
              <div>
                <h3 className="text-sm font-semibold text-gray-900 dark:text-white">{tutor.name}</h3>
                <p className="text-xs text-gray-500 dark:text-gray-400">{tutor.teaching_style} Tutor</p>
        </div>
            </div>

            {/* Add the Rating Component */}
            {tutorId && <RatingComponent tutorId={tutorId} />}

            {/* Course Information */}
            <div className="p-4 border-b border-gray-200 dark:border-gray-700">
              <h2 className="text-lg font-bold text-gray-900 dark:text-white mb-1">{course.topic}</h2>
              <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">{course.difficulty_level} · {course.estimated_duration}</p>
              <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                <div 
                  className="bg-primary-600 dark:bg-primary-500 h-2.5 rounded-full" 
                  style={{ width: `${progress.progress_percentage}%` }}
                ></div>
              </div>
              <div className="flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1">
                <span>{progress.progress_percentage}% complete</span>
                <span>Updated: {formatTime(progress.last_activity)}</span>
              </div>
            </div>

            {/* Module List */}
            <div className="flex-1 overflow-y-auto p-4">
              <h3 className="font-medium text-gray-900 dark:text-white text-sm mb-3 flex items-center">
                <BookOpen className="w-4 h-4 mr-1 text-primary-500" />
                Course Modules
              </h3>
              <div className="space-y-3">
                {modules.map((module) => (
                  <div key={module.id} className="space-y-1">
                    <div
                        onClick={() => toggleModule(module.id)}
                      className={`flex items-center p-2 rounded-md cursor-pointer transition-colors ${
                        expandedModule === module.id
                          ? 'bg-primary-50 dark:bg-primary-900/30 text-primary-700 dark:text-primary-300'
                          : 'hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300'
                      }`}
                    >
                      {getModuleStatusIcon(module.status, progress.current_module_id === module.id)}
                      
                      <span className="ml-2 text-sm font-medium flex-1">{module.title}</span>
                      
                      <ChevronDown className={`w-5 h-5 transition-transform ${
                        expandedModule === module.id ? 'transform rotate-180' : ''
                      }`} />
                                    </div>
                              
                    {expandedModule === module.id && (
      <div className="pl-8 pr-2 py-2 text-sm text-gray-600 dark:text-gray-400">
        <p>{typeof module.description === 'string' ? module.description : JSON.stringify(module.description)}</p>
        {progress.current_module_id === module.id && module.status === 'pending' && (
                                <Button
                            size="sm"
              variant="outline"
                            className="mt-2 text-xs"
                                  onClick={() => completeModule(module.id)} 
                                >
                            Mark as Completed
                                </Button>
                )}
              </div>
                    )}
          </div>
                ))}
                </div>
            </div>
            
            {/* Session Actions */}
            <div className="p-4 border-t border-gray-200 dark:border-gray-700">
              {session.status === 'active' ? (
                    <Button
                  variant="outline" 
                  onClick={completeSession}
                  className="w-full text-sm"
                >
                  <CheckCircle className="w-4 h-4 mr-2" />
                  Complete Session
                    </Button>
              ) : (
                <div className="text-sm text-center text-gray-500 dark:text-gray-400">
                  Session completed on {formatTime(session.updated_at)}
                </div>
              )}
              
                    <Button
                        variant="outline" 
                        size="sm"
                onClick={() => {
                  openDeleteModal(session.public_id)
                }}
                className="mt-2 text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20 hover:bg-red-100 dark:hover:bg-red-800/30 hover:text-red-700 border border-red-200 dark:border-red-800 w-full text-sm"
              >
                <TrashIcon className="w-4 h-4 mr-2" />
                Delete Session
                    </Button>
            </div>
          </aside>
          
          {/* Main Chat Area */}
        {/* Removed h-full to allow flex to calculate height correctly */}
        <div className={`flex-1 flex flex-col overflow-hidden ${isCourseSidebarOpen && 'lg:ml-0'}`}>
          {/* Chat Header */}
          <div className="p-4 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between">
            <div className="flex items-center">
              {/* Toggler for course sidebar on small screens */}
              <Button variant="ghost" size="sm" onClick={toggleCourseSidebar} className="lg:hidden mr-2 p-2 text-gray-600 dark:text-gray-400">
                <FaBars className="w-6 h-6" />
                </Button>
              <MessageSquare className="w-5 h-5 text-primary-500 mr-2" />
              <h2 className="text-lg font-bold text-gray-900 dark:text-white">Chat with {tutor.name}</h2>
        </div>
          </div>
          
          {/* Overlay for mobile when course sidebar is open */}
          {isCourseSidebarOpen && (
            <div 
              className="fixed inset-0 z-30 bg-black opacity-50 lg:hidden"
              onClick={toggleCourseSidebar}
            ></div>
          )}
          
          {/* Chat Messages */}
          <div className="flex-1 overflow-y-auto p-4" ref={chatContainerRef}>
            {!isConnected && isError && (
                <div className="mb-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded text-yellow-700 dark:text-yellow-400 text-sm flex items-center">
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                Attempting to reconnect...
                </div>
              )}
              
              {messages.map((message, index) => (
              <ChatMessage key={index} author={message.sender} user={user} tutor={tutor}>
                <MarkdownRenderer content={message.content} />
              </ChatMessage>
            ))}
            
            {tutorStatus === 'thinking' && (
               <ChatMessage author="tutor" tutor={tutor}>
                 <div className="flex items-center space-x-2">
                   <div className="w-2 h-2 bg-gray-500 rounded-full animate-pulse"></div>
                   <div className="w-2 h-2 bg-gray-500 rounded-full animate-pulse delay-75"></div>
                   <div className="w-2 h-2 bg-gray-500 rounded-full animate-pulse delay-150"></div>
                </div>
               </ChatMessage>
              )}
          </div>
          
          {/* Message input area */}
          <div className="p-4 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800">
            <div className="flex">
              <textarea
                className="flex-1 p-2 border border-gray-300 dark:border-gray-600 rounded-l-md resize-none focus:outline-none focus:ring-2 focus:ring-primary-500 dark:bg-gray-700 dark:text-white"
                placeholder={
                  session?.status !== 'active'
                    ? 'This session has ended'
                    : 'Type your message here...'
                }
                value={input}
                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setInput(e.target.value)}
                onKeyPress={handleKeyPress}
                disabled={session?.status !== 'active' || isSending}
                rows={1}
              />
              <button
                className={`px-4 rounded-r-md flex items-center justify-center ${
                  !input.trim() || session?.status !== 'active' || isSending
                    ? 'bg-gray-300 text-gray-500 cursor-not-allowed dark:bg-gray-600 dark:text-gray-400'
                    : 'bg-primary-600 text-white hover:bg-primary-700'
                }`}
                onClick={handleSendMessage}
                disabled={!input.trim() || session?.status !== 'active' || isSending}
                aria-label="Send message"
                type="button"
              >
                <SendIcon className="w-5 h-5" />
              </button>
        </div>
          </div>
        </div>
      </div>
    );
  }

  // Fallback for any other state
  return (
    <div className="flex items-center justify-center h-screen">
      <div className="text-gray-600 dark:text-gray-400">Loading...</div>
    </div>
  );
};

export default TutorSession;