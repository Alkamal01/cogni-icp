type UserSettings = record {
    font_size : text;
    learning_style : text;
    activity_sharing : text;
    preferred_language : text;
    ai_interaction_style : text;
    contrast : text;
    profile_visibility : text;
    two_factor_enabled : bool;
    daily_goal_hours : nat8;
    difficulty_level : text;
};
type User = record {
    id : principal;
    bio : opt text;
    status : text;
    last_name : opt text;
    oauth_provider : opt text;
    is_active : bool;
    last_login : opt nat64;
    location : opt text;
    public_id : text;
    settings : UserSettings;
    created_at : nat64;
    last_active : nat64;
    role : text;
    avatar_url : opt text;
    subscription : text;
    username : text;
    first_name : opt text;
    updated_at : nat64;
    oauth_id : opt text;
    is_verified : bool;
    public_key : opt text;
    email : text;
    wallet_address : opt text;
    blockchain_wallet_type : opt text;
    blockchain_wallet_address : opt text;
    blockchain_wallet_connected_at : opt nat64;
};
type Tutor = record {
    id : nat64;
    bio : opt text;
    name : text;
    is_pinned : bool;
    expertise : vec text;
    public_id : text;
    created_at : nat64;
    avatar_url : opt text;
    user_id : principal;
    updated_at : nat64;
    personality : text;
    knowledge_base : vec text;
    voice_id : opt text;
    teaching_style : text;
    voice_settings : vec record { text; text };
};
type ConnectionRequest = record {
    id : nat64;
    status : text;
    receiver_id : principal;
    created_at : nat64;
    updated_at : nat64;
    message : opt text;
    sender_id : principal;
    responded_at : opt nat64;
};
type Result = variant { Ok : UserConnection; Err : text };
type Result_1 = variant { Ok : ConnectionRequest; Err : text };
type Result_2 = variant { Ok : User; Err : text };
type Result_3 = variant { Ok : null; Err : text };
type Result_4 = variant { Ok : bool; Err : text };
type Result_5 = variant { Ok : UserTaskCompletion; Err : text };
type Result_6 = variant { Ok : nat64; Err : text };
type Result_7 = variant { Ok : StudyGroup; Err : text };
type Result_8 = variant { Ok : GroupMembership; Err : text };
type Result_9 = variant { Ok : Task; Err : text };
type UserConnection = record {
    id : nat64;
    status : text;
    user2_id : principal;
    created_at : nat64;
    updated_at : nat64;
    user1_id : principal;
};
type UserTaskCompletion = record {
    id : nat64;
    proof_data : opt text;
    task_id : nat64;
    user_id : principal;
    points_earned : nat32;
    completed_at : nat64;
    metadata : opt vec record { text; text };
    tokens_earned : nat32;
    completion_count : nat32;
};
type StudyGroup = record {
    id : nat64;
    description : opt text;
    name : text;
    is_private : bool;
    public_id : text;
    goals : opt text;
    creator_id : principal;
    created_at : nat64;
    updated_at : nat64;
    max_members : nat32;
    learning_level : text;
    topic_id : opt nat64;
    meeting_frequency : opt text;
};
type GroupMembership = record {
    id : nat64;
    status : text;
    role : text;
    user_id : principal;
    last_active_at : opt nat64;
    group_id : nat64;
    joined_at : nat64;
    contributions : nat32;
};
type Task = record {
    id : nat64;
    difficulty : text;
    description : text;
    is_repeatable : bool;
    public_id : text;
    created_by : principal;
    created_at : nat64;
    expires_at : opt nat64;
    max_completions : nat32;
    metadata : opt vec record { text; text };
    is_active : bool;
    title : text;
    points_reward : nat32;
    token_reward : nat32;
    requirements : opt text;
    category : text;
};
service : {
    accept_connection_request : (nat64) -> (Result);
    complete_task : (nat64) -> (Result_5);
    create_study_group : (text, opt text, bool, nat32, text) -> (Result_7);
    create_subscription : () -> (Result_3);
    create_subscription_plan_admin : () -> (Result_3);
    create_task : (text, text, text, text, nat32, nat32) -> (Result_9);
    create_tutor : (text, text, text, text, vec text) -> (Tutor);
    create_user : (text, text) -> (User);
    get_all_users_admin : () -> (Result_2) query;
    get_connections : () -> (vec UserConnection) query;
    get_self : () -> (opt User) query;
    get_study_group : (nat64) -> (opt StudyGroup) query;
    get_sui_wallet_balance : (text) -> (Result_6) query;
    get_tasks : () -> (vec Task) query;
    get_tutor : (nat64) -> (opt Tutor) query;
    get_tutors : () -> (vec Tutor) query;
    join_study_group : (nat64) -> (Result_8);
    send_connection_request : (principal, opt text) -> (Result_1);
    update_user_status_admin : (principal, text) -> (Result_2);
    verify_zk_proof : () -> (Result_4);
} 